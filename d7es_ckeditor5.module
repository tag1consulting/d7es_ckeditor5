<?php

use Drupal\d7es_ckeditor5\Profile;

/**
 * @todo: implement plugins enable/disable.
 *
 * @return array
 */
function d7es_ckeditor5_plugins(): array {
  $plugins = &drupal_static(__FUNCTION__, []);
  if (!$plugins) {
    $plugins = module_invoke_all('d7es_ckeditor5_plugins');
    drupal_alter('d7es_ckeditor5_plugins', $plugins);
  }
  return $plugins;
}

/**
 * Implementation of hook_element_info_alter().
 */
function d7es_ckeditor5_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'd7es_ckeditor5_pre_render_text_format';
}

function d7es_ckeditor5_load_by_field($field, $format) {
  if (is_array($format)) {
    $format_arr = $format;
    $format = isset($format_arr['#value']) ? $format_arr['#value'] : $format_arr['#default_value'];
  }

  if (!isset($field['#id'])) {
    return $field;
  }

  $field['#attributes']['d7es-ckeditor5-enabled'] = TRUE;
  unset($field['#resizable']);

  $field['#attached']['js'][] = ['type' => 'setting', 'data' => ['d7es_ckeditor5' => [
    'textarea_default_format' => [$field['#name'] => $format],
    'timestamp' => variable_get('css_js_query_string', '0')
  ]]];

  return $field;
}

/**
 * @param $element
 *
 * @return array
 */
function d7es_ckeditor5_pre_render_text_format($element): array {
  $init = &drupal_static(__FUNCTION__, FALSE);

  if (!isset($element['#format'])) {
    return $element;
  }

  if (isset($element['value'])) {
    if (!isset($element['format'])) {
      return $element;
    }
    if (isset($element['summary'])) {
      $element['value'] = d7es_ckeditor5_load_by_field($element['value'], $element['format']['format'], TRUE, $element['summary']['#id']);
      $element['summary'] = d7es_ckeditor5_load_by_field($element['summary'], $element['format']['format'], FALSE);
    }
    else {
      $element['value'] = d7es_ckeditor5_load_by_field($element['value'], $element['format']['format']);
    }
  }
  else {
    $element = d7es_ckeditor5_load_by_field($element, $element['#format']);
  }

  if ($init) {
    return $element;
  }

  $init = TRUE;

  // Global CKEditor initialization,
  $formats = d7es_ckeditor5_get_formats();

  if (empty($formats)) {
    return $element;
  }

  $settings = [];
  foreach ($formats as $id => $format) {
    $profile = new Profile($id);
    $configuration = $profile->getConfiguration();

    if (empty($configuration)) {
      continue;
    }
    $settings[$format] = $configuration;
  }

  $lib_path = libraries_get_path('ckeditor5');

  // importmap shims
  $element['#attached']['js'][] = libraries_get_path('es-module-shims') . '/es-module-shims.js';

  // CKEditor 5 CORE.
  $ckeditor_path = url($lib_path . '/ckeditor5/ckeditor5.js', ['absolute' => TRUE]);
  $importmaps = ['imports' => [
    'ckeditor5' => $ckeditor_path,
  ]];

  // Extra libraries.
  $plugins = d7es_ckeditor5_plugins();
  if ($plugins) {
    foreach ($plugins as $key => $plugin) {
      [$module] = explode('.', $key);
      if (!isset($importmaps['imports'][$module])) {
        $importmaps['imports'][$module] = url($plugin['path'], ['absolute' => TRUE]);
      }
    }
  }
  $importmaps_content = json_encode($importmaps, JSON_UNESCAPED_SLASHES);

  // Add importmaps.
  $markup = <<<EOT
<script type="importmap">
  {$importmaps_content}
</script>
EOT;

  $ckeditor_5_script = [
    '#type' => 'markup',
    '#markup' => $markup,
    '#weight' => -100,
  ];

  drupal_add_html_head($ckeditor_5_script, 'ckeditor_5_script');

  $element['#attached']['css'][] = $lib_path . '/ckeditor5/ckeditor5-editor.css';
  $element['#attached']['css'][] = $lib_path . '/ckeditor5/ckeditor5-content.css';

  // CKEditor 5 Premium features.
  $license_key = variable_get('d7es_ckeditor5_license_key', NULL);
  if ($license_key) {
    // @todo: convert to module.
    $element['#attached']['js'][] = [
      'type' => 'file',
      'weight' => -10,
      'data' => $lib_path . '/ckeditor5-premium-features/ckeditor5-premium-features.js',
    ];
    $element['#attached']['css'][] = $lib_path . '/ckeditor5-premium-features/ckeditor5-premium-features.css';
    $element['#attached']['css'][] = $lib_path . '/ckeditor5-premium-features/ckeditor5-premium-features-editor.css';
    $element['#attached']['css'][] = $lib_path . '/ckeditor5-premium-features/ckeditor5-premium-features-content.css';

    $settings['licenseKey'] = $license_key;
  }

  // Drupal bridge.
  d7es_ckeditor5_attach_module(drupal_get_path('module', 'd7es_ckeditor5') . '/js/d7es_ckeditor5.editor.js');

  // Global settings
  $element['#attached']['js'][] = ['type' => 'setting', 'data' => ['d7es_ckeditor5' => $settings]];

  return $element;
}

/**
 * @param $path
 *
 * @return void
 */
function d7es_ckeditor5_attach_module($path) {
  $path = url($path, ['absolute' => TRUE]);
  $script = [
    '#type' => 'markup',
    '#markup' => "<script type=\"module\" src=\"$path\"></script>\n",
  ];

  drupal_add_html_head($script, md5($path));
}

/** CORE plugins */

/**
 * @todo: check plugins definition in D10/CKEditor5 (eg. plugin should be main)
 *
 * Implements hook_ckeditor5_plugins().
 */
function d7es_ckeditor5_d7es_ckeditor5_plugins(): array {
  $plugins['ckeditor5.Heading'] = [
    'desc' => t('Heading plugin.'),
    'buttons' => [
      'heading' => [
        'label' => t('Heading'),
      ],
    ],
  ];

  $plugins['ckeditor5.Bold'] = [
    'desc' => t('Bold plugin.'),
    'buttons' => [
      'bold' => [
        'label' => t('Bold'),
      ],
    ],
  ];

  $plugins['ckeditor5.Italic'] = [
    'desc' => t('Italic plugin.'),
    'buttons' => [
      'italic' => [
        'label' => t('Italic'),
      ],
    ],
  ];

  $plugins['ckeditor5.Underline'] = [
    'desc' => t('Underline plugin.'),
    'buttons' => [
      'underline' => [
        'label' => t('Underline'),
      ],
    ],
  ];

  $plugins['ckeditor5.Strikethrough'] = [
    'desc' => t('Strikethrough plugin.'),
    'buttons' => [
      'Strikethrough' => [
        'label' => t('Strikethrough'),
      ],
    ],
  ];

  $plugins['ckeditor5.Subscript'] = [
    'desc' => t('Subscript plugin.'),
    'buttons' => [
      'subscript' => [
        'label' => t('Subscript'),
      ],
    ],
  ];

  $plugins['ckeditor5.Superscript'] = [
    'desc' => t('Superscript plugin.'),
    'buttons' => [
      'superscript' => [
        'label' => t('Superscript'),
      ],
    ],
  ];

  $plugins['ckeditor5.Indent'] = [
    'desc' => t('Indent plugin.'),
    'buttons' => [
      'indent' => [
        'label' => t('Indent'),
      ],
      'outdent' => [
        'label' => t('Outdent'),
      ],
    ],
  ];

  $plugins['ckeditor5.Code'] = [
    'desc' => t('Code plugin.'),
    'buttons' => [
      'code' => [
        'label' => t('Code'),
      ],
    ],
  ];

  $plugins['ckeditor5.CodeBlock'] = [
    'desc' => t('CodeBlock plugin.'),
    'buttons' => [
      'codeBlock' => [
        'label' => t('CodeBlock'),
      ],
    ],
  ];

  $plugins['ckeditor5.BlockQuote'] = [
    'desc' => t('BlockQuote plugin.'),
    'buttons' => [
      'blockQuote' => [
        'label' => t('BlockQuote'),
      ],
    ],
  ];

  $plugins['ckeditor5.Link'] = [
    'desc' => t('Link plugin.'),
    'buttons' => [
      'link' => [
        'label' => t('Link'),
      ],
    ],
  ];

  $plugins['ckeditor5.List'] = [
    'desc' => t('List plugin.'),
    'buttons' => [
      'numberedList' => [
        'label' => t('Numbered list'),
      ],
      'bulletedList' => [
        'label' => t('Bulleted list'),
      ],
    ],
  ];

  $plugins['ckeditor5.Alignment'] = [
    'desc' => t('Alignment plugin.'),
    'buttons' => [
      'alignment' => [
        'label' => t('Alignment'),
      ],
    ],
  ];

  $plugins['ckeditor5.Table'] = [
    'desc' => t('Table plugin.'),
    'buttons' => [
      'insertTable' => [
        'label' => t('Table'),
      ],
    ],
  ];

  $plugins['ckeditor5.HorizontalLine'] = [
    'desc' => t('HorizontalLine plugin.'),
    'buttons' => [
      'horizontalLine' => [
        'label' => t('HorizontalLine'),
      ],
    ],
  ];

  $plugins['ckeditor5.RemoveFormat'] = [
    'desc' => t('RemoveFormat plugin.'),
    'buttons' => [
      'removeFormat' => [
        'label' => t('RemoveFormat'),
      ],
    ],
  ];

  $plugins['ckeditor5.Style'] = [
    'desc' => t('Font Style plugin.'),
    'buttons' => [
      'style' => [
        'label' => t('Style'),
      ],
    ],
  ];

  $plugins['ckeditor5.SourceEditing'] = [
    'desc' => t('SourceEditing plugin.'),
    'buttons' => [
      'sourceEditing' => [
        'label' => t('SourceEditing'),
      ],
    ],
  ];

  $plugins['ckeditor5.SpecialCharacters'] = [
    'desc' => t('SpecialCharacters plugin.'),
    'buttons' => [
      'specialCharacters' => [
        'label' => t('SpecialCharacters'),
      ],
    ],
  ];

  $plugins['ckeditor5.Undo'] = [
    'desc' => t('Undo plugin.'),
    'buttons' => [
      'undo' => [
        'label' => t('Undo'),
      ],
      'redo' => [
        'label' => t('Redo'),
      ],
    ],
  ];

  $plugins['ckeditor5.ShowBlocks'] = [
    'desc' => t('ShowBlocks plugin.'),
    'buttons' => [
      'showBlocks' => [
        'label' => t('ShowBlocks'),
      ],
    ],
  ];

  // Custom plugins.
  $plugins['note.Note'] = [
    'desc' => t('Note CKEditor5 plugin.'),
    'path' => drupal_get_path('module', 'd7es_ckeditor5') . '/plugins/note/plugin.js',
    'buttons' => [
      'note' => [
        'label' => t('Note'),
      ],
    ],
  ];

  return $plugins;
}

/**
 * Implements hook_permission().
 */
function d7es_ckeditor5_permission() {
  return [
    'administer ckeditor5 configuration' => [
      'title' => t('Administer ckeditor5 configuration'),
      'description' => t('Administer ckeditor5 configuration'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function d7es_ckeditor5_menu() {
  $items = [];

  $items['admin/config/content/ckeditor5'] = [
    'title' => 'CKEditor5 configuration',
    'description' => 'Manage CKEditor 5 configuration.',
    'access arguments' => ['administer ckeditor5 configuration'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['d7es_ckeditor5_configuration_form'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/d7es_ckeditor5.admin.inc',
    'file path' => drupal_get_path('module', 'd7es_ckeditor5'),
  ];

  return $items;
}

function d7es_ckeditor5_get_formats() {
  return db_select('d7es_ckeditor5_input_format', 'dcif')
    ->fields('dcif', ['id', 'format'])
    ->execute()
    ->fetchAllKeyed();
}
